#!/usr/bin/env node

var fs = require("fs");
var inquirer = require("inquirer");
var hid = require("node-hid");
const { program } = require("commander");
var { SerialPort } = require("serialport");

var pkg = require("../package.json");
var serverMain = require("../index");
const path = require("path");

var options = {};

program
  .version(pkg.version)
  .usage("-s <secret> -p <port> [options]")
  .option("-l, --list", "list available ports then exit")
  .option(
    "-d, --devicelist",
    "list available devices then exit (vendorId- and productId is optional)"
  )
  .option(
    "-s, --secret",
    "the secret key stored in the ~/.cncjs/cncrc.cfg file"
  )
  .option("-p, --port <port>", "path or name of serial port")
  .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
  .option(
    "--socket-address <address>",
    "socket address or hostname (default: localhost)",
    "localhost"
  )
  .option("--socket-port <port>", "socket port (default: 8000)", 8000)
  .option(
    "--controller-type <type>",
    "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
    "Grbl"
  )
  .option(
    "--access-token-lifetime <lifetime>",
    "access token lifetime in seconds or a time span string (default: 30d)",
    "30d"
  )
  .option("--probeOffset <offset>", "offset (thickness) for Z probe", "19.5")
  .option("--vendorId <vendor>", "Vendor ID of USB HID device")
  .option("--productId <product>", "Product ID of USB HID device");

program.parse();
// get the parsed options
// multi-word options such as "socket-address" are camel-cased, becoming program.opts().socketAddress etc.
var options = program.opts();

if (options.list) {
  SerialPort.list()
    .then((ports) => {
      ports.forEach(function (port) {
        console.log(port.path);
      });
    })
    .catch((err) => {
      if (err) {
        console.error(err);
        process.exit(1);
      }
    });
  return;
}

if (options.devicelist) {
  var devices = hid.devices();

  if (options.vendorId && options.productId) {
    console.log(
      "Looking for keyboard with VID:PID:",
      options.vendorId,
      options.productId
    );

    const findPath = (interface) => {
      var deviceInfo = devices.find(
        (item) =>
          item.vendorId === Number(options.vendorId) &&
          item.productId === Number(options.productId)
        //   &&
        //   item.interface === Number(interface)
      );

      if (deviceInfo) {
        console.log(
          "Successfully found device with VID:PID:",
          options.vendorId,
          options.productId
        );
        return deviceInfo.path;
      } else {
        console.log(
          "Failed searching for device with VID:PID:",
          options.vendorId,
          options.productId
        );
        return "No device found";
      }
    };

    console.log("Keyboard HID Address:", findPath(-1));
  } else {
    console.log("devices: ", devices);

    // devices.forEach(function (item) {
    //   console.log("manufacturer: ", item.manufacturer);
    //   console.log("product: ", item.product);
    //   console.log("vendorId: ", item.vendorId);
    //   console.log("productId: ", item.productId);
    //   console.log("interface: ", item.interface);
    //   console.log("path: ", item.path);
    //   console.log();
    // });
  }

  return;
}

var store = {
  controller: {
    state: {},
    settings: {},
  },
  sender: {
    status: {},
  },
};

var kbdevent = {
  l_control: 0,
  l_shift: 0,
  l_alt: 0,
  l_meta: 0,
  r_control: 0,
  r_shift: 0,
  r_alt: 0,
  r_meta: 0,
  key: 0, // Normal keys
  extra: 0, // Advanced Keys or Special Keys
  repeating: 0, // If it is repeating a movement
  move: 1, // Actually move size
  default_move: 1, // Alter by F1, F2, F3
};

var createServer = function (options) {
  //   console.log("options: ", options);

  serverMain(options, function (err, socket) {
    // Grbl
    socket.on("Grbl:state", function (state) {
      store.controller.state = state;
    });
    socket.on("Grbl:settings", function (settings) {
      store.controller.settings = settings;
    });

    // Smoothie
    socket.on("Smoothie:state", function (state) {
      store.controller.state = state;
    });
    socket.on("Smoothie:settings", function (settings) {
      store.controller.settings = settings;
    });

    // TinyG
    socket.on("TinyG:state", function (state) {
      store.controller.state = state;
    });
    socket.on("TinyG:settings", function (settings) {
      store.controller.settings = settings;
    });

    // Sender
    socket.on("sender:status", function (data) {
      store.sender.status = data;
    });

    console.log("Keyboard VID:PID is ", options.vendorId, options.productId);

    const findPath = (interface) => {
      var devices = hid.devices();

      var deviceInfo = devices.find(
        (item) =>
          item.vendorId === Number(options.vendorId) &&
          item.productId === Number(options.productId) &&
          item.interface === Number(interface)
      );

      if (deviceInfo) {
        return deviceInfo.path;
      }
    };

    // find keyboard with index 0
    var keyboardHIDAddress = findPath(0);
    console.log("Keyboard HID Address: ", keyboardHIDAddress);

    var keyboard_main = new hid.HID(keyboardHIDAddress);

    keyboard_main.on("data", function (data) {
      var recv = data.toJSON().data;
      var bits = recv.shift();
      kbdevent.l_control = (bits & 1) !== 0;
      kbdevent.l_shift = (bits & 2) !== 0;
      kbdevent.l_alt = (bits & 4) !== 0;
      kbdevent.l_meta = (bits & 8) !== 0;
      kbdevent.r_control = (bits & 16) !== 0;
      kbdevent.r_shift = (bits & 32) !== 0;
      kbdevent.r_alt = (bits & 64) !== 0;
      kbdevent.r_meta = (bits & 128) !== 0;
      recv.shift();
      kbdevent.key = recv.shift();
      sendToController();
    });

    function sendToController() {
      // Calculate move size modifiers
      kbdevent.move = kbdevent.default_move;

      console.log("key: ", kbdevent.key);
      switch (kbdevent.key) {
        case 87: // +             (z axis down)
          socket.emit("write", options.port, "G91 Z-" + kbdevent.move + ";\n");
          break;
        case 86: // -             (z axis up)
          socket.emit("write", options.port, "G91 Z" + kbdevent.move + ";\n");
          break;
        case 92: // arrow: left   (move -X)
          socket.emit("write", options.port, "G91 X-" + kbdevent.move + ";\n");
          break;
        case 94: // arrow: right  (move +X)
          socket.emit("write", options.port, "G91 X" + kbdevent.move + ";\n");
          break;
        case 96: // arrow: up     (move +Y)
          socket.emit("write", options.port, "G91 Y" + kbdevent.move + ";\n");
          break;
        case 90: // arrow: down   (move -Y)
          socket.emit("write", options.port, "G91 Y-" + kbdevent.move + ";\n");
          break;

        case 89: // arrow: End    (move -X and -Y)
          socket.emit(
            "write",
            options.port,
            "G91 X-" + kbdevent.move + " Y-" + kbdevent.move + ";\n"
          );
          break;

        case 97: // arrow: Page up  (move +X and +Y)
          socket.emit(
            "write",
            options.port,
            "G91 X" + kbdevent.move + " Y" + kbdevent.move + ";\n"
          );
          break;

        case 91: // arrow: Page Down  (move +X and -Y)
          socket.emit(
            "write",
            options.port,
            "G91 X" + kbdevent.move + " Y-" + kbdevent.move + ";\n"
          );
          break;

        case 95: // Key 7: Home  (move -X and +Y)
          socket.emit(
            "write",
            options.port,
            "G91 X-" + kbdevent.move + " Y" + kbdevent.move + ";\n"
          );
          break;

        case 93: // Key: 5        (move to work home)
          socket.emit("write", options.port, "G90 X0 Y0;\n");
          break;

        case 99: // . - Probe
          var SAFE_HEIGHT = -1; // Height needed to clear everything (negative number, distance below Z limit)
          var PROBE_DISTANCE = 100;
          var PROBE_FAST_FEEDRATE = 200; // mm/min
          var PROBE_SLOW_FEEDRATE = 20; // mm/min
          var RETRACTION_DISTANCE = 4; // mm

          socket.emit("write", options.port, "G21;\n"); // Metric
          socket.emit("write", options.port, "G90;\n"); // Absolute positioning
          socket.emit("write", options.port, "G53 Z" + SAFE_HEIGHT + "\n"); //Move in Machine Coordinates

          // ; Probe toward workpiece, stop on contact, signal error if failure
          socket.emit("write", options.port, "G91;\n"); // Relative positioning
          socket.emit(
            "write",
            options.port,
            "G38.2 Z-" + PROBE_DISTANCE + " F" + PROBE_FAST_FEEDRATE + "\n"
          );
          socket.emit("write", options.port, "G0 Z1;\n");
          socket.emit(
            "write",
            options.port,
            "G38.2 Z-2 F" + PROBE_SLOW_FEEDRATE + "\n"
          );
          socket.emit("write", options.port, "G90;\n"); // Absolute positioning

          // Update Z offset for tool taking touch plate height into account
          socket.emit(
            "write",
            options.port,
            "G10 L20 P1 Z" + options.probeOffset + "\n"
          );

          // Retract from the touch plate
          socket.emit("write", options.port, "G91;\n");
          socket.emit(
            "write",
            options.port,
            "G0 Z" + RETRACTION_DISTANCE + ";\n"
          );
          socket.emit("write", options.port, "G90;\n"); // Absolute positioning
          break;

        case 83: // Set Work Position for X and Y to zero
          socket.emit("write", options.port, "G10 L20 P1 X0 Y0;\n");
          break;

        case 98: // Unlock
          socket.emit("write", options.port, "$X;\n");
          break;

        case 84: // key: /
          kbdevent.default_move = 0.1;
          break;
        case 85: // key: *
          kbdevent.default_move = 1;
          break;
        case 42: // key: Backspace
          kbdevent.default_move = 10;
          break;

        case 88: // Key: OK or Enter - HOMING
          socket.emit("write", options.port, "$H;\n");
        default:
          break;
      }

      //console.log(kbdevent);
    }
  });
};

if (options.port) {
  createServer(options);
  return;
}

SerialPort.list()
  .then((ports) => {
    const choices = ports.map(function (port) {
      return port.path;
    });

    inquirer
      .prompt([
        {
          type: "list",
          name: "port",
          message: "Specify which port you want to use?",
          choices: choices,
        },
      ])
      .then(function (answers) {
        options.port = answers.port;

        createServer(options);
      });
  })
  .catch((err) => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  });
